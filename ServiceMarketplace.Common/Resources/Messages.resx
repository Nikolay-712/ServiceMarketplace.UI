<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotRemoveAllContacts" xml:space="preserve">
    <value>You cannot remove all contacts. The service must have at least one contact</value>
  </data>
  <data name="CannotRemoveAllTags" xml:space="preserve">
    <value>You cannot remove all tags. The service must have at least one tag</value>
  </data>
  <data name="EmailAlreadyExists" xml:space="preserve">
    <value>Email address already exists</value>
  </data>
  <data name="ExistsCategoryName" xml:space="preserve">
    <value>A category with this name has already been added</value>
  </data>
  <data name="ExistsCityName" xml:space="preserve">
    <value>A city with this name has already been added</value>
  </data>
  <data name="ExistsServiceName" xml:space="preserve">
    <value>You already have a service registered with this name</value>
  </data>
  <data name="ExistsServiceTag" xml:space="preserve">
    <value>The tag one you want to add for this service already exists</value>
  </data>
  <data name="ExistsSubCategoryName" xml:space="preserve">
    <value>A sub-category with this name has already been added</value>
  </data>
  <data name="ExistsTag" xml:space="preserve">
    <value>A tag with this name has already been added</value>
  </data>
  <data name="FieldLength" xml:space="preserve">
    <value>The length of this field should be between {MinLength} and {MaxLength} characters.</value>
  </data>
  <data name="GeneralErrorMessage" xml:space="preserve">
    <value>Something went wrong. Please try again later</value>
  </data>
  <data name="InvalidCredentials" xml:space="preserve">
    <value>Invalid email or password</value>
  </data>
  <data name="InvalidDay" xml:space="preserve">
    <value>Invalid value for day of week</value>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>Invalid email format</value>
  </data>
  <data name="InvalidEndTime" xml:space="preserve">
    <value>End time must be after start time</value>
  </data>
  <data name="InvalidPhnoneNumber" xml:space="preserve">
    <value>The specified phone number is not valid, please use the format : '+359 xxxx xx xxx' or  '0 xxxx xx xxx'</value>
  </data>
  <data name="InvalidRatingValue" xml:space="preserve">
    <value>The value you selected is not valid</value>
  </data>
  <data name="InvalidStartTime" xml:space="preserve">
    <value>Start time must be before end time</value>
  </data>
  <data name="InvalidUrl" xml:space="preserve">
    <value>Please use a valid web address</value>
  </data>
  <data name="NotFoundCategory" xml:space="preserve">
    <value>There is no such category</value>
  </data>
  <data name="NotFoundCity" xml:space="preserve">
    <value>There is no such city</value>
  </data>
  <data name="NotFoundContact" xml:space="preserve">
    <value>There is no such contact</value>
  </data>
  <data name="NotFoundOwnerComment" xml:space="preserve">
    <value>There is no such owner comment</value>
  </data>
  <data name="NotFoundRating" xml:space="preserve">
    <value>There is no such rating</value>
  </data>
  <data name="NotFoundService" xml:space="preserve">
    <value>There is no such service</value>
  </data>
  <data name="NotFoundServiceCity" xml:space="preserve">
    <value>The city you want to remove is not valid for this service</value>
  </data>
  <data name="NotFoundServiceTag" xml:space="preserve">
    <value>The tag you want to remove is not valid for this service</value>
  </data>
  <data name="NotFoundTag" xml:space="preserve">
    <value>There is no such tag</value>
  </data>
  <data name="NotFoundUser" xml:space="preserve">
    <value>Not found user</value>
  </data>
  <data name="OfferNotSupporte" xml:space="preserve">
    <value>The option you have chosen to offer is not supported</value>
  </data>
  <data name="PasswordMismatch" xml:space="preserve">
    <value>Passwords do not match</value>
  </data>
  <data name="RequiredField" xml:space="preserve">
    <value>Field required</value>
  </data>
  <data name="RoleCurrentlyUse" xml:space="preserve">
    <value>Can't remove the role, it is currently in use</value>
  </data>
  <data name="RoleNameAlreadyExists" xml:space="preserve">
    <value>Role name already exists</value>
  </data>
  <data name="RoleNotFound" xml:space="preserve">
    <value>Not found role</value>
  </data>
  <data name="UserNotInRole" xml:space="preserve">
    <value>The current user has no such role</value>
  </data>
  <data name="UserRoleExists" xml:space="preserve">
    <value>The current user already has this role</value>
  </data>
  <data name="ValueRange" xml:space="preserve">
    <value>The value must be between {MinValue} - {MaxValue}</value>
  </data>
</root>